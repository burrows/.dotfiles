snippet er
	router.${1|get,put,post,delete|}(
	  '${2:route}',
	  wrap(async (req: Request, res: Response) => {
		  $0
	  })
	);

snippet st
	s.state('$1', (s) => {
	  $0
	});

snippet en
	s.enter((ctx, evt) => {
	  $0
	  return {
		  context: {...ctx},
		  actions: [],
		}
	});

snippet ex
	s.exit((ctx, evt) => {
	  $0
	  return {
		  context: {...ctx},
		  actions: [],
		}
	});

snippet on
	s.on('$1', (ctx, evt) => {
	  $0
	  return {
		  context: {...ctx},
		  actions: [],
			goto: '',
		}
	});

snippet mod
  import { Model as ObjectionModel, Page, QueryBuilder } from 'objection';
  
  import Model from './Model';
  
  class ${1:ModelName}QueryBuilder<
    M extends ObjectionModel,
    R = M[]
  > extends QueryBuilder<M, R> {
    ArrayQueryBuilderType!: ${1}QueryBuilder<M, M[]>;
    SingleQueryBuilderType!: ${1}QueryBuilder<M, M>;
    MaybeSingleQueryBuilderType!: ${1}QueryBuilder<M, M | undefined>;
    NumberQueryBuilderType!: ${1}QueryBuilder<M, number>;
    PageQueryBuilderType!: ${1}QueryBuilder<M, Page<M>>;
  }
  
  export default class ${1} extends Model {
    static tableName = '$0';
  
    QueryBuilderType!: ${1}QueryBuilder<this>;
    static QueryBuilder = ${1}QueryBuilder;
  
    public id!: number;
  }
